# Basic
id <- {null|$0}
const <- {$1|null|$0}

# Parsing and IO
aoc <- {(((("test/aoc_input/" ++ (string $0)) ++ "/") ++ (string $1)) ++ ".txt") | read}
ints <- {lines|int}

# Bools and Predicates
not <- {if | $0 | False | True}
odd <- {mod $0 2|bool}
even <- {odd $0|not}
lengthy <- {$1|length|(== $0)}

# Numerical
min <- {if | ($0 < $1) | $0 | $1}
max <- {if | ($0 > $1) | $0 | $1}

# List Operations
fold <- foldl
scan <- scanl
head <- ix 0
tail <- drop 1
foldl1 <- {foldl | $0 | head $1 | tail $1}
scanl1 <- {scanl | $0 | head $1 | tail $1}
reverse <- {foldl | flip cons | [] | $0}
length <- {map (const 1) | sum}
sum <- {foldl|+|0|$0}
minOn <- {map $0 [$1, $2]|monadic <= |if|$1|$2}
maxOn <- {map $0 [$1, $2]|monadic > |if|$1|$2}
maximum <- foldl1 max
minimum <- foldl1 min
maximumOn <- {$1 | foldl1 (maxOn $0)}
minimumOn <- {$1 | foldl1 (minOn $0)}
count <- {filter $0 $1 | length}
mode <- {counts|maximumOn snd|fst}
antimode <- {counts|minimumOn snd|fst}
pairs <- {$0|fork 2|[id, drop 1]|monadic zip}
square <- {$0 | fork (length $0)}
enum <- {$0|fork 2|[length,id]|[range 0, id]|monadic zip}
windows <- {$1|tails|take $0|transpose|take ((1 + length $1) - $0)}

# Accessor / Setter Aliases
first <- nap 0
second <- nap 1
third <- nap 2
fst <- ix 0
snd <- ix 1
thd <- ix 2
