#+TITLE: TODO

- Do Next
  - [ ] Move the standard library to a module system
  - [ ] Lambdas
    - args as list (monadic)
    - args as variadic
  - [ ] Sliding windows
  - [ ] Remove all partial functions to stop interpreter crashes:
    - Take out every fromRight'
      - Interpreter.hs
      - And in parser: when eval'ing
    - Semigroup / Num instances for Value need exhaustive patterns
    - Builtin functions fail gracefully
  - [ ] Remove explicit Valence, infer it from the unbound arguments
  - [ ] variadic, inverse function of monadic
    - For this, require monadic to be properly curried
      - Which requires proper actual currying
      - e.g. monadic has valence 1, takes a function with any valence, and returns a function with valence 1.
      - But this new function won't be "findable" by optype?
        - Solve with Anon optype?
        - No, because the builtins are where the impls are stored
        - Instead we should really be storing the Impl inside the function
- Language features
  - [ ] If/Then/Else
  - [ ] Program fragments as lambdas
    - Either monadic (args as a list) or variadic (how?)
    - Allow parsing subprograms in parens
  - [ ] Let bindings
  - [ ] Lexical scoping
  - [ ] Named function definition
  - [ ] Shortcuts for referring to output of previous line / assignment
  - [X] Bools
  - [X] Falsy 0, [] and False
  - [X] Enable builtins written in Crossbow
  - [X] left-partiality e.g 1+ allowed as well as +1
  - [X] partial application for e.g. 1,2,3|+,-,+|4,5,6 = 5,-3,9
  - [X] Text
  - [X] Read from files
  - [X] Functoriality by default (e.g. [1,2,3] + 1 fmaps the addition)
  - [X] explicit casting
  - [X] function values
  - [X] Clause pipes
  - [X] Basic arithmetic
- Interface Features
  - [ ] Builtin for reading piped STDIN
  - [ ] Evaluate on keypress
  - [ ] Auto-updating display as you type
    - With truncation for long strings, lists
  - [ ] AST Tree mode; show forks, monadics as a digraph in ncurses
  - [ ] Terminal colors
  - [ ] Vim-like bindings w/ clause semantics
- Standard Library
  - [X] Functional basics
    - [X] map
    - [X] fold
    - [X] scan
  - [ ] parsing
  - [ ] sorting
  - [ ] lists
  - [ ] sets
  - [ ] search
  - [ ] DS from prims (trees from list-nests, etc)
  - [ ] assoc lists / maps
  - [ ] map utils like countmap
  - [ ] bitwise stuff
- Misc Goals
  - [-] solve 2021 AOC day by day
  - [ ] compile to e.g. LLVM
  - [ ] bootstrapped compiler written in crossbow
