#+TITLE: TODO

- Do Next
  - [ ] Reader -> State, allowing builtins to change with execution
  - [ ] Bind function with aliases (how to parse identities?)
  - [ ] HSImpl -> wrap with State
  - [ ] runFile: in Main, calling on a multiline program parser in Parser which can parse nested Programs in {}
    - Print all values, where the last value is the return type
  - [ ] Lib is dynamically loaded with a default value
  - [ ] Move AOC solutions to an external file
  - [ ] Tests for AOC use runFile
  - [ ] REPL / file mode depending on flags
  - [ ] REPL also runs in context via e.g. StateT
  - [-] Remove all partial functions to stop interpreter crashes:
    - [-] Take out every:
      - [ ] fromRight' (on e.g. Text.Read)
      - [ ] withPrettyError
      - [X] unsafePerformIO
    - [ ] Exhausive Instances (Semigroup)
    - [ ] Remove partiality for builtins - OpImpl returns Either
      - Move to a new module
      - Give each its own line
      - Each then gets enough space to error out on a bad valence match
      - Can also handle errors more nicely inside
    - [ ] Finally take out all compiler warnings
      - Remove partiality in functions and handle appropriately
- Language features
  - [ ] variadic, inverse function of monadic
    - Give Valence a Variadic member where we just strictly apply until we have a value
  - [ ] emacs mode
  - [ ] lean into the lispiness; its also a lisp
  - [ ] Treat a list full of functions as a function not just for application but also for e.g. folding, mapping
    - can circumvent this by wrapping in {} for now e.g. {[+1,+2]}
  - [ ] Let bindings; getting more and more useful
  - [ ] Binary with no args is repl, with args runs a source file
  - [ ] Lexical scoping
  - [ ] Move the standard library to a module system
  - [ ] Automemoization for everything
  - [ ] Named function definition
  - [ ] Shortcuts for referring to output of previous line / assignment
  - [ ] Stack trace
  - [ ] range syntax with variable endpoints
    - for now use range function
  - [X] mapbang for lambdas
    - [X] Num, Semigroup etc classes must error; catch these errors instead as InternalErrors
    - [X] Exhaustive Num
  - [X] Program fragments as lambdas
  - [X] Syntax for mapping - a bang!?
    - Either monadic (args as a list) or variadic (how?)
    - Allow parsing subprograms in parens
  - [X] Spaces in lists are allowed
  - [X] No-arg lambdas assume $0 at the start
  - [X] Un-hardcode 1-lambdas and enable $1+
  - [X] Sliding windows for AOC pt2
  - [X] Remove explicit Valence, infer it from the unbound arguments
  - [X] If/Then/Else
  - [X] Lambdas
  - [X] Start with unnamed lambda args like $0, $1
    - need to terminate when eval'ing Identifier
    - only eval resume after subbing
  - [X] Unify functions and programs; | is just the ap function
    - Do everything in parser including reduction
  - [X] Bools
  - [X] Falsy 0, [] and False
  - [X] Enable builtins written in Crossbow
  - [X] left-partiality e.g 1+ allowed as well as +1
  - [X] partial application for e.g. 1,2,3|+,-,+|4,5,6 = 5,-3,9
  - [X] Text
  - [X] Read from files
  - [X] Functoriality by default (e.g. [1,2,3] + 1 fmaps the addition)
  - [X] explicit casting
  - [X] function values
  - [X] Clause pipes
  - [X] Basic arithmetic
- Interface Features
  - [ ] Compile REPL with Haste for web?
  - [ ] Builtin for reading piped STDIN
  - [ ] Evaluate on keypress
  - [ ] Auto-updating display as you type
    - With truncation for long strings, lists
  - [ ] AST Tree mode; show forks, monadics as a digraph in ncurses
  - [ ] Terminal colors
  - [ ] Vim-like bindings w/ clause semantics
- Standard Library
  - [X] Functional basics
    - [X] map
    - [X] fold
    - [X] scan
  - [ ] parsing
  - [ ] sorting
  - [ ] lists
  - [ ] sets
  - [ ] search
  - [ ] DS from prims (trees from list-nests, etc)
  - [ ] assoc lists / maps
  - [ ] map utils like countmap
  - [ ] bitwise stuff
- Misc Goals
  - [-] solve 2021 AOC day by day
  - [ ] compile to e.g. LLVM
  - [ ] bootstrapped compiler written in crossbow
